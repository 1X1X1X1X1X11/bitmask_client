Source: bitmask
Section: misc
Priority: extra
Maintainer: Ben Carrillo <ben@futeisha.org>
Standards-Version: 3.9.6
Uploaders: Micah Anderson <micah@debian.org>
Homepage: https://leap.se
Build-Depends: debhelper (>= 8.0.0), dh-python, python (>=2.6), python-setuptools,
               pep8,
               python-sphinx (>= 1.0.7+dfsg), docutils-common, python-nose, python-mock,
               python-requests (>= 1.2.3), python-srp, python-crypto, python-keyring, python-xdg,
               python-jsonschema (>= 0.7.0), python-psutil, python-openssl,
               python-dateutil, python-argparse, pyside-tools,
               xvfb, xauth
X-Python-Version: >= 2.6

Package: bitmask
Architecture: all
Depends:
  ${misc:Depends}, ${python:Depends},
  python-openssl,
  python-crypto,
  python-keyring (>= 0.9.2),
  python-srp,
  python-dateutil,
  python-daemon,
  python-argparse,
  python-logbook (>= 0.7.0-1),
  python-psutil,
  python-requests (>= 1.2.3-1),
  python-jsonschema (>= 0.7.0),
# temporal pinning until libsodium is in debian
  python-zmq (>= 14.4.1-1.1),
  python-txzmq (>= 0.7.3),
  python-setuptools,
  python-zope.proxy,
  openvpn,
  python-pyside.qtcore, 
  python-pyside.qtgui,
  python-pyside.qtsvg,
  python-twisted-core,
  python-leap-common,
  leap-mail (>= 0.3.99),
  soledad-client
# Let's skip the Thunderbird Extension, which is installed by default, until we do a public
# mail release.
# Recommends: xul-ext-bitmask
Suggests: policykit-1-gnome
Enhances: openvpn, gnupg
Description: Provides the desktop client for LEAP 
 The LEAP project aims to secure everyday communication.
 .
 This client is necessary for users to run on their local machines for:
 .
 * The LEAP VPN service which provides circumvention, location anonymization,
 and traffic encryption in a hassle-free, automatically self-configuring
 fashion, and has an enhanced level of security.
 .
 * The LEAP email service which provides full end-to-end client-encrypted email,
 quietly handling the complexities of public key encryption and allowing for
 backward compatibility with legacy email when necessary. Email is encrypted and
 stored so only the recipient can read it, both locally and when synchronized
 with the server; all message relay among service providers is required to be
 encrypted when possible; and public keys are automatically discovered and
 validated.


